-- MySQL Script generated by MySQL Workbench
-- Wed Jun  6 11:41:20 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema BanderaAzul
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `BanderaAzul` ;

-- -----------------------------------------------------
-- Schema BanderaAzul
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `BanderaAzul` DEFAULT CHARACTER SET utf8 ;
USE `BanderaAzul` ;

-- -----------------------------------------------------
-- Table `BanderaAzul`.`Pais`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Pais` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Pais` (
  `idPais` INT NOT NULL AUTO_INCREMENT,
  `nombrePais` VARCHAR(45) NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idPais`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Provincia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Provincia` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Provincia` (
  `idProvincia` INT NOT NULL AUTO_INCREMENT,
  `nombreProvincia` VARCHAR(45) NOT NULL,
  `Pais_idPais` INT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idProvincia`),
  INDEX `fk_Provincia_Pais1_idx` (`Pais_idPais` ASC),
  CONSTRAINT `fk_Provincia_Pais1`
    FOREIGN KEY (`Pais_idPais`)
    REFERENCES `BanderaAzul`.`Pais` (`idPais`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Canton`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Canton` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Canton` (
  `idCanton` INT NOT NULL AUTO_INCREMENT,
  `nombreCanton` VARCHAR(45) NOT NULL,
  `Provincia_idProvincia` INT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idCanton`),
  INDEX `fk_Canton_Provincia1_idx` (`Provincia_idProvincia` ASC),
  CONSTRAINT `fk_Canton_Provincia1`
    FOREIGN KEY (`Provincia_idProvincia`)
    REFERENCES `BanderaAzul`.`Provincia` (`idProvincia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Distrito`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Distrito` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Distrito` (
  `idDistrito` INT NOT NULL AUTO_INCREMENT,
  `nombreDistrito` VARCHAR(45) NOT NULL,
  `Canton_idCanton` INT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idDistrito`),
  INDEX `fk_Distrito_Canton1_idx` (`Canton_idCanton` ASC),
  CONSTRAINT `fk_Distrito_Canton1`
    FOREIGN KEY (`Canton_idCanton`)
    REFERENCES `BanderaAzul`.`Canton` (`idCanton`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Persona`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Persona` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Persona` (
  `cedula` INT NOT NULL,
  `nombrePersona` VARCHAR(45) NOT NULL,
  `primerApellidoPesona` VARCHAR(45) NOT NULL,
  `segundoApellidoPersona` VARCHAR(45) NOT NULL,
  `fechaNacimiento` DATETIME NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  `Distrito_idDistrito` INT NOT NULL,
  `Pais_idPais` INT NOT NULL,
  PRIMARY KEY (`cedula`),
  INDEX `fk_Persona_Distrito1_idx` (`Distrito_idDistrito` ASC),
  INDEX `fk_Persona_Pais1_idx` (`Pais_idPais` ASC),
  CONSTRAINT `fk_Persona_Distrito1`
    FOREIGN KEY (`Distrito_idDistrito`)
    REFERENCES `BanderaAzul`.`Distrito` (`idDistrito`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Persona_Pais1`
    FOREIGN KEY (`Pais_idPais`)
    REFERENCES `BanderaAzul`.`Pais` (`idPais`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`CorreoXPersona`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`CorreoXPersona` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`CorreoXPersona` (
  `idCorreo` INT NOT NULL AUTO_INCREMENT,
  `correo` VARCHAR(45) NOT NULL,
  `Persona_cedula` INT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idCorreo`),
  INDEX `fk_correosXpersona_Persona1_idx` (`Persona_cedula` ASC),
  CONSTRAINT `fk_correosXpersona_Persona1`
    FOREIGN KEY (`Persona_cedula`)
    REFERENCES `BanderaAzul`.`Persona` (`cedula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`TipoUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`TipoUsuario` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`TipoUsuario` (
  `idtipoUsuario` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(45) NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idtipoUsuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Usuario` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Usuario` (
  `nombreUsuario` VARCHAR(45) NOT NULL,
  `contrasena` VARCHAR(512) NOT NULL,
  `puntosActuales` INT NOT NULL DEFAULT 0,
  `puntosGastados` INT NOT NULL DEFAULT 0,
  `puntosTotales` INT NOT NULL DEFAULT 0,
  `tipoUsuario_idtipoUsuario` INT NOT NULL,
  `Persona_cedula` INT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`nombreUsuario`),
  UNIQUE INDEX `nombreUsuario_UNIQUE` (`nombreUsuario` ASC),
  INDEX `fk_Usuario_tipoUsuario1_idx` (`tipoUsuario_idtipoUsuario` ASC),
  INDEX `fk_Usuario_Persona1_idx` (`Persona_cedula` ASC),
  CONSTRAINT `fk_Usuario_tipoUsuario1`
    FOREIGN KEY (`tipoUsuario_idtipoUsuario`)
    REFERENCES `BanderaAzul`.`TipoUsuario` (`idtipoUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Usuario_Persona1`
    FOREIGN KEY (`Persona_cedula`)
    REFERENCES `BanderaAzul`.`Persona` (`cedula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`TipoComercio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`TipoComercio` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`TipoComercio` (
  `idTipoComercio` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idTipoComercio`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Comercio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Comercio` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Comercio` (
  `idComercio` INT NOT NULL AUTO_INCREMENT,
  `nombreComercio` VARCHAR(45) NOT NULL,
  `contacto` INT NOT NULL,
  `descripcion` VARCHAR(45) NOT NULL,
  `Usuario_nombreUsuario` VARCHAR(45) NOT NULL,
  `TipoComercio_idTipoComercio` INT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idComercio`),
  INDEX `fk_Comercio_Usuario1_idx` (`Usuario_nombreUsuario` ASC),
  INDEX `fk_Comercio_TipoComercio1_idx` (`TipoComercio_idTipoComercio` ASC),
  CONSTRAINT `fk_Comercio_Usuario1`
    FOREIGN KEY (`Usuario_nombreUsuario`)
    REFERENCES `BanderaAzul`.`Usuario` (`nombreUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Comercio_TipoComercio1`
    FOREIGN KEY (`TipoComercio_idTipoComercio`)
    REFERENCES `BanderaAzul`.`TipoComercio` (`idTipoComercio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Producto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Producto` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Producto` (
  `idProducto` INT NOT NULL AUTO_INCREMENT,
  `foto` VARCHAR(100) NULL,
  `precio` DECIMAL NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `Comercio_idComercio` INT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idProducto`),
  INDEX `fk_Producto_Comercio1_idx` (`Comercio_idComercio` ASC),
  CONSTRAINT `fk_Producto_Comercio1`
    FOREIGN KEY (`Comercio_idComercio`)
    REFERENCES `BanderaAzul`.`Comercio` (`idComercio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Localizacion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Localizacion` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Localizacion` (
  `codigo` INT NOT NULL AUTO_INCREMENT,
  `coordenadaX` FLOAT NOT NULL,
  `coordenadaY` FLOAT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`codigo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`CentroAcopio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`CentroAcopio` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`CentroAcopio` (
  `idcentroAcopio` INT NOT NULL AUTO_INCREMENT,
  `nombreCentroAcopio` VARCHAR(45) NOT NULL,
  `contacto` INT NOT NULL,
  `Localizacion_codigo` INT NOT NULL,
  `Distrito_idDistrito` INT NOT NULL,
  `Usuario_nombreUsuario` VARCHAR(45) NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idcentroAcopio`, `Localizacion_codigo`),
  INDEX `fk_centroAcopio_Localizacion1_idx` (`Localizacion_codigo` ASC),
  INDEX `fk_centroAcopio_Distrito1_idx` (`Distrito_idDistrito` ASC),
  INDEX `fk_CentroAcopio_Usuario1_idx` (`Usuario_nombreUsuario` ASC),
  CONSTRAINT `fk_centroAcopio_Localizacion1`
    FOREIGN KEY (`Localizacion_codigo`)
    REFERENCES `BanderaAzul`.`Localizacion` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_centroAcopio_Distrito1`
    FOREIGN KEY (`Distrito_idDistrito`)
    REFERENCES `BanderaAzul`.`Distrito` (`idDistrito`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CentroAcopio_Usuario1`
    FOREIGN KEY (`Usuario_nombreUsuario`)
    REFERENCES `BanderaAzul`.`Usuario` (`nombreUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`TelefonoXPersona`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`TelefonoXPersona` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`TelefonoXPersona` (
  `idTelefono` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `telefono` INT NOT NULL,
  `Persona_cedula` INT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idTelefono`),
  INDEX `fk_telefonosXpesona_Persona1_idx` (`Persona_cedula` ASC),
  CONSTRAINT `fk_telefonosXpesona_Persona1`
    FOREIGN KEY (`Persona_cedula`)
    REFERENCES `BanderaAzul`.`Persona` (`cedula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`EquivalenciaMaterial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`EquivalenciaMaterial` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`EquivalenciaMaterial` (
  `peso` INT NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `puntos` INT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`peso`, `nombre`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`ProductoXUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`ProductoXUsuario` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`ProductoXUsuario` (
  `Producto_idProducto` INT NOT NULL,
  `Usuario_nombreUsuario` VARCHAR(45) NOT NULL,
  `cantidad` INT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`Producto_idProducto`, `Usuario_nombreUsuario`),
  INDEX `fk_Producto_has_Usuario_Usuario1_idx` (`Usuario_nombreUsuario` ASC),
  INDEX `fk_Producto_has_Usuario_Producto1_idx` (`Producto_idProducto` ASC),
  CONSTRAINT `fk_Producto_has_Usuario_Producto1`
    FOREIGN KEY (`Producto_idProducto`)
    REFERENCES `BanderaAzul`.`Producto` (`idProducto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Producto_has_Usuario_Usuario1`
    FOREIGN KEY (`Usuario_nombreUsuario`)
    REFERENCES `BanderaAzul`.`Usuario` (`nombreUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Puntos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Puntos` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Puntos` (
  `idPuntos` INT NOT NULL AUTO_INCREMENT,
  `idTipoPuntos` INT NOT NULL,
  `cantidad` VARCHAR(45) NOT NULL,
  `fechaHoraTransaccionPuntos` DATETIME NOT NULL,
  `Usuario_nombreUsuario` VARCHAR(45) NOT NULL,
  `centroAcopio_idcentroAcopio` INT NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idPuntos`),
  INDEX `fk_Puntos_Usuario1_idx` (`Usuario_nombreUsuario` ASC),
  INDEX `fk_Puntos_centroAcopio1_idx` (`centroAcopio_idcentroAcopio` ASC),
  CONSTRAINT `fk_Puntos_Usuario1`
    FOREIGN KEY (`Usuario_nombreUsuario`)
    REFERENCES `BanderaAzul`.`Usuario` (`nombreUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Puntos_centroAcopio1`
    FOREIGN KEY (`centroAcopio_idcentroAcopio`)
    REFERENCES `BanderaAzul`.`CentroAcopio` (`idcentroAcopio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`cambioClave`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`cambioClave` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`cambioClave` (
  `idcambioClave` INT NOT NULL,
  `claveNueva` VARCHAR(512) NOT NULL,
  `claveVieja` VARCHAR(512) NOT NULL,
  `Usuario_nombreUsuario` VARCHAR(45) NOT NULL,
  `fecCreacion` DATETIME NULL,
  `usuarioCreacion` VARCHAR(45) NULL,
  `fecUltimaModificacion` DATETIME NULL,
  `usuarioUltimaModificacion` VARCHAR(45) NULL,
  PRIMARY KEY (`idcambioClave`),
  INDEX `fk_cambioClave_Usuario1_idx` (`Usuario_nombreUsuario` ASC),
  CONSTRAINT `fk_cambioClave_Usuario1`
    FOREIGN KEY (`Usuario_nombreUsuario`)
    REFERENCES `BanderaAzul`.`Usuario` (`nombreUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `BanderaAzul` ;

-- -----------------------------------------------------
-- function checkPassword
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP function IF EXISTS `BanderaAzul`.`checkPassword`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE FUNCTION `checkPassword` (`pUser` VARCHAR(45), `pPass` VARCHAR(45)) 
	RETURNS BOOLEAN
    NOT DETERMINISTIC
    READS SQL DATA
    SQL SECURITY DEFINER
BEGIN
	RETURN EXISTS(SELECT tipoUsuario_idtipoUsuario 
                   FROM `Usuario` 
                   WHERE nombreUsuario = pUser AND contrasena = pPass);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerLocalizacion
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerLocalizacion`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerLocalizacion` ()
	NOT DETERMINISTIC
    READS SQL DATA
    SQL SECURITY DEFINER
BEGIN
	SELECT coordenadaX, coordenadaY
    FROM `localizacion`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function tipoUsuario
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP function IF EXISTS `BanderaAzul`.`tipoUsuario`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE FUNCTION `tipoUsuario` (`pUser` VARCHAR(45))
	RETURNS INT(1)
    NOT DETERMINISTIC
    READS SQL DATA
    SQL SECURITY DEFINER
BEGIN
	RETURN (SELECT tipoUsuario_idtipoUsuario 
			FROM `usuario` 
            WHERE nombreUsuario = pUser);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerPaises
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerPaises`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerPaises` ()
	NOT DETERMINISTIC
    READS SQL DATA
    SQL SECURITY DEFINER
BEGIN
	 SELECT idPais, nombrePais 
     FROM `Pais`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerProvincia
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerProvincia`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerProvincia` (IN `pCodigo` INT)
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER
BEGIN
	 SELECT idProvincia, nombreProvincia 
     FROM `Provincia`
     WHERE Pais_idPais = pCodigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCanton
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerCanton`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerCanton` (IN `pCodigo` INT)
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER
BEGIN
	SELECT idCanton, nombreCanton 
    FROM `Canton` 
    WHERE Provincia_idProvincia = pCodigo; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerDistrito
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerDistrito`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerDistrito` (IN `pCodigo` INT)
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER
BEGIN
	 SELECT idDistrito, nombreDistrito 
     FROM `Distrito`
     WHERE Canton_idCanton = pCodigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarUsuario
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarUsuario`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarUsuario`(IN `pCedula` INT, IN `pNombre` VARCHAR(45), IN `pApellido1` VARCHAR(45), IN `pApellido2` VARCHAR(45), IN `pNacimiento` DATETIME, IN `pDistrito` INT, IN `pPais` INT, IN `pUser` VARCHAR(45), IN `pPass` VARCHAR(45), IN `pTipo` INT)
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER
BEGIN
	 INSERT INTO `persona`(`cedula`, `nombrePersona`, `primerApellidoPesona`, `segundoApellidoPersona`, `fechaNacimiento`, `Distrito_idDistrito`, `Pais_idPais`) VALUES (pCedula, pNombre, pApellido1, pApellido2, pNacimiento, pDistrito, pPais); 
     INSERT INTO `usuario`(`nombreUsuario`, `contrasena`, `puntosActuales`, `puntosGastados`, `puntosTotales`, `tipoUsuario_idtipoUsuario`, `Persona_cedula`) VALUES (pUser,pPass,0,0,0,pTipo,pCedula);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarCorreo
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarCorreo`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarCorreo` (IN `pCorreo` VARCHAR(45), IN `pCedula` INT)
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	INSERT INTO `correoxpersona`(`correo`, `Persona_cedula`) VALUES (pCorreo,pCedula);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarTelefono
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarTelefono`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarTelefono`(IN `pTelefono` INT, IN `pCedula` INT) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	INSERT INTO `telefonoxpersona`(`telefono`, `Persona_cedula`) VALUES (pTelefono,pCedula);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCentroAcopio
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerCentroAcopio`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerCentroAcopio` ()
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	SELECT `centroacopio`.`nombreCentroAcopio`, `centroacopio`.`contacto`, `localizacion`.`coordenadaX`, `localizacion`.`coordenadaY`, `distrito`.`nombreDistrito`, `canton`.`nombreCanton`, `provincia`.`nombreProvincia` 
    FROM `centroacopio`, `localizacion`, `distrito`, `canton`, `provincia` 
    WHERE `localizacion`.`codigo` = `centroacopio`.`Localizacion_codigo` AND 
		  `distrito`.`idDistrito` = `centroacopio`.`Distrito_idDistrito` AND 
          `canton`.`idCanton` = `distrito`.`Canton_idCanton` AND 
          `provincia`.`idProvincia` = `canton`.`Provincia_idProvincia`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerProducto
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerProducto`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerProducto` (IN `pUser` VARCHAR(45)) 
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	SELECT foto, nombre, precio 
    FROM `Producto` 
    WHERE Comercio_idComercio = (SELECT idComercio 
								 FROM `Comercio` 
                                 WHERE Usuario_nombreUsuario = pUser); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarProducto
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarProducto`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarProducto` (IN `pFoto` VARCHAR(100), IN `pPrecio` INT, IN `pNombre` VARCHAR(45), IN `pUser` VARCHAR(45))
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	INSERT INTO `Producto`(`foto`, `precio`, `nombre`, `Comercio_idComercio`) 
    VALUES (pFoto, pPrecio, pNombre, (SELECT LAST_INSERT_ID())); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarCentroAcopio
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarCentroAcopio`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarCentroAcopio` (IN `pNombre` VARCHAR(45), IN `pContacto` INT, IN `pCoordX` FLOAT, IN `pCoordY` FLOAT, IN `pDistrito` INT, IN `pUser` VARCHAR(45)) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	INSERT INTO `localizacion`(`coordenadaX`, `coordenadaY`) VALUES (pCoordX,pCoordY); 
	INSERT INTO `centroacopio`(`nombreCentroAcopio`, `contacto`, `Localizacion_codigo`, `Distrito_idDistrito`, `Usuario_nombreUsuario`) 
		VALUES (pNombre, pContacto, (SELECT LAST_INSERT_ID()), pDistrito, pUser);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarComercio
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarComercio`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarComercio`(IN `pNombre` VARCHAR(45), IN `pContacto` INT, IN `pDescripcion` VARCHAR(45), IN `pUser` VARCHAR(45), IN `pTipo` INT) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN
	INSERT INTO `Comercio` (`nombreComercio`, `contacto`, `descripcion`, `Usuario_nombreUsuario`, `TipoComercio_idTipoComercio`)
		VALUES (pNombre, pContacto, pDescripcion, pUser, pTipo); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarEquivalenciaMaterial
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarEquivalenciaMaterial`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarEquivalenciaMaterial` (IN `pPeso` INT, IN `pPuntos` INT, IN `pNombre` VARCHAR(45)) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	INSERT INTO `equivalenciamaterial`(`peso`, `puntos`, `nombre`) VALUES (pPeso,pPuntos,pNombre); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editarEquivalenciaMaterial
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`editarEquivalenciaMaterial`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `editarEquivalenciaMaterial`(IN `pPeso` INT, IN `pNombre` VARCHAR(45), IN `pPuntos` INT) 
	NOT DETERMINISTIC 
    MODIFIES SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	UPDATE `equivalenciamaterial` 
		SET `puntos`= pPuntos 
        WHERE `equivalenciamaterial`.`peso`= pPeso 
        AND `equivalenciamaterial`.`nombre`= pNombre; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarCanje
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarCanje`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarCanje`() 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function puedeCanjear
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP function IF EXISTS `BanderaAzul`.`puedeCanjear`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE FUNCTION `puedeCanjear`(`totalPrecio` INT, `pUser` VARCHAR(45), `resp` BOOLEAN) 
	RETURNS BOOLEAN
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	SELECT IF(totalPrecio<=(SELECT puntosActuales 
							FROM `Usuario` 
                            WHERE nombreUsuario = pUser), 
			  TRUE, 
              FALSE) INTO resp; 
	RETURN resp; 
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `BanderaAzul`;

DELIMITER $$

USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Pais_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER() TRIGGER `BanderaAzul`.`Pais_BEFORE_INSERT` BEFORE INSERT ON `Pais` 
	FOR EACH ROW 
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Pais_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER() TRIGGER `BanderaAzul`.`Pais_BEFORE_UPDATE` BEFORE UPDATE ON `Pais`
	FOR EACH ROW 
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Provincia_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Provincia_BEFORE_INSERT` BEFORE INSERT ON `Provincia` FOR EACH ROW
BEGIN
	INSERT INTO `Provincia`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Provincia_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Provincia_BEFORE_UPDATE` BEFORE UPDATE ON `Provincia` FOR EACH ROW
BEGIN
	INSERT INTO `Provincia`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Canton_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Canton_BEFORE_INSERT` BEFORE INSERT ON `Canton` FOR EACH ROW
BEGIN
	INSERT INTO `Canton`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Canton_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Canton_BEFORE_UPDATE` BEFORE UPDATE ON `Canton` FOR EACH ROW
BEGIN
	INSERT INTO `Canton`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Distrito_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Distrito_BEFORE_INSERT` BEFORE INSERT ON `Distrito` FOR EACH ROW
BEGIN
	INSERT INTO `Distrito`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Distrito_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Distrito_BEFORE_UPDATE` BEFORE UPDATE ON `Distrito` FOR EACH ROW
BEGIN
	INSERT INTO `Distrito`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Persona_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Persona_BEFORE_INSERT` BEFORE INSERT ON `Persona` FOR EACH ROW
BEGIN
	INSERT INTO `Persona`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Persona_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Persona_BEFORE_UPDATE` BEFORE UPDATE ON `Persona` FOR EACH ROW
BEGIN
	INSERT INTO `Persona`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`CorreoXPersona_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`CorreoXPersona_BEFORE_INSERT` BEFORE INSERT ON `CorreoXPersona` FOR EACH ROW
BEGIN
	INSERT INTO `CorreoXPersona`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`CorreoXPersona_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`CorreoXPersona_BEFORE_UPDATE` BEFORE UPDATE ON `CorreoXPersona` FOR EACH ROW
BEGIN
	INSERT INTO `CorreoXPersona`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TipoUsuario_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TipoUsuario_BEFORE_INSERT` BEFORE INSERT ON `TipoUsuario` FOR EACH ROW
BEGIN
	INSERT INTO `TipoUsuario`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TipoUsuario_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TipoUsuario_BEFORE_UPDATE` BEFORE UPDATE ON `TipoUsuario` FOR EACH ROW
BEGIN
	INSERT INTO `TipoUsuario`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Usuario_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Usuario_BEFORE_INSERT` BEFORE INSERT ON `Usuario` FOR EACH ROW
BEGIN
	INSERT INTO `Usuario`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Usuario_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Usuario_BEFORE_UPDATE` BEFORE UPDATE ON `Usuario` FOR EACH ROW
BEGIN
	INSERT INTO `Usuario`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TipoComercio_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TipoComercio_BEFORE_INSERT` BEFORE INSERT ON `TipoComercio` FOR EACH ROW
BEGIN
	INSERT INTO `TipoComercio`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TipoComercio_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TipoComercio_BEFORE_UPDATE` BEFORE UPDATE ON `TipoComercio` FOR EACH ROW
BEGIN
	INSERT INTO `TipoComercio`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Comercio_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Comercio_BEFORE_INSERT` BEFORE INSERT ON `Comercio` FOR EACH ROW
BEGIN
		INSERT INTO `Comercio`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Comercio_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Comercio_BEFORE_UPDATE` BEFORE UPDATE ON `Comercio` FOR EACH ROW
BEGIN
	INSERT INTO `Comercio`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Producto_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Producto_BEFORE_INSERT` BEFORE INSERT ON `Producto` FOR EACH ROW
BEGIN
	INSERT INTO `Producto`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());

END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Producto_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Producto_BEFORE_UPDATE` BEFORE UPDATE ON `Producto` FOR EACH ROW
BEGIN
	INSERT INTO `Producto`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Localizacion_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Localizacion_BEFORE_INSERT` BEFORE INSERT ON `Localizacion` FOR EACH ROW
BEGIN
	INSERT INTO `Localizacion`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Localizacion_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Localizacion_BEFORE_UPDATE` BEFORE UPDATE ON `Localizacion` FOR EACH ROW
BEGIN
	INSERT INTO `Localizacion`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`CentroAcopio_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`CentroAcopio_BEFORE_INSERT` BEFORE INSERT ON `CentroAcopio` FOR EACH ROW
BEGIN
	INSERT INTO `CentroAcopio`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`CentroAcopio_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`CentroAcopio_BEFORE_UPDATE` BEFORE UPDATE ON `CentroAcopio` FOR EACH ROW
BEGIN
	INSERT INTO `CentroAcopio`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TelefonoXPersona_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TelefonoXPersona_BEFORE_INSERT` BEFORE INSERT ON `TelefonoXPersona` FOR EACH ROW
BEGIN
	INSERT INTO `TelefonoXPersona`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TelefonoXPersona_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TelefonoXPersona_BEFORE_UPDATE` BEFORE UPDATE ON `TelefonoXPersona` FOR EACH ROW
BEGIN
	INSERT INTO `TelefonoXPersona`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`EquivalenciaMaterial_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`EquivalenciaMaterial_BEFORE_INSERT` BEFORE INSERT ON `EquivalenciaMaterial` FOR EACH ROW
BEGIN
	INSERT INTO `EquivalenciaMaterial`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`EquivalenciaMaterial_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`EquivalenciaMaterial_BEFORE_UPDATE` BEFORE UPDATE ON `EquivalenciaMaterial` FOR EACH ROW
BEGIN
	INSERT INTO `EquivalenciaMaterial`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`ProductoXUsuario_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`ProductoXUsuario_BEFORE_INSERT` BEFORE INSERT ON `ProductoXUsuario` FOR EACH ROW
BEGIN
	INSERT INTO `ProductoXUsuario`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`ProductoXUsuario_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`ProductoXUsuario_BEFORE_UPDATE` BEFORE UPDATE ON `ProductoXUsuario` FOR EACH ROW
BEGIN
		INSERT INTO `ProductoXUsuario`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Puntos_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Puntos_BEFORE_INSERT` BEFORE INSERT ON `Puntos` FOR EACH ROW
BEGIN
	INSERT INTO `Puntos`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Puntos_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Puntos_BEFORE_UPDATE` BEFORE UPDATE ON `Puntos` FOR EACH ROW
BEGIN
	INSERT INTO `Puntos`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`cambioClave_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`cambioClave_BEFORE_INSERT` BEFORE INSERT ON `cambioClave` FOR EACH ROW
BEGIN
	INSERT INTO `cambioClave`(`fecCreacion`, `usuarioCreacion`) values (NOW(), CURRENT_USER());
END$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`cambioClave_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`cambioClave_BEFORE_UPDATE` BEFORE UPDATE ON `cambioClave` FOR EACH ROW
BEGIN
	INSERT INTO `cambioClave`(`fecultimaModificacion`, `usuarioUltimaModificacion`) values (NOW(), CURRENT_USER());
END$$


DELIMITER ;
