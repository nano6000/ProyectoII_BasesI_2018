-- MySQL Script generated by MySQL Workbench
-- Thu Jun  7 19:22:24 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema BanderaAzul
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `BanderaAzul` ;

-- -----------------------------------------------------
-- Schema BanderaAzul
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `BanderaAzul` DEFAULT CHARACTER SET utf32 COLLATE utf32_spanish_ci ;
USE `BanderaAzul` ;

-- -----------------------------------------------------
-- Table `BanderaAzul`.`Pais`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Pais` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Pais` (
  `idPais` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador del país',
  `nombrePais` VARCHAR(45) NOT NULL COMMENT 'Nombre del país',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idPais`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Provincia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Provincia` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Provincia` (
  `idProvincia` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador de la provincia',
  `nombreProvincia` VARCHAR(45) NOT NULL COMMENT 'Nombre de la provincia',
  `Pais_idPais` INT NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idProvincia`),
  INDEX `fk_Provincia_Pais1_idx` (`Pais_idPais` ASC),
  CONSTRAINT `fk_Provincia_Pais1`
    FOREIGN KEY (`Pais_idPais`)
    REFERENCES `BanderaAzul`.`Pais` (`idPais`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Canton`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Canton` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Canton` (
  `idCanton` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador del cantón',
  `nombreCanton` VARCHAR(45) NOT NULL COMMENT 'Nombre del cantón',
  `Provincia_idProvincia` INT NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idCanton`),
  INDEX `fk_Canton_Provincia1_idx` (`Provincia_idProvincia` ASC),
  CONSTRAINT `fk_Canton_Provincia1`
    FOREIGN KEY (`Provincia_idProvincia`)
    REFERENCES `BanderaAzul`.`Provincia` (`idProvincia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Distrito`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Distrito` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Distrito` (
  `idDistrito` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador del distrito',
  `nombreDistrito` VARCHAR(45) NOT NULL COMMENT 'Nombre del distrito',
  `Canton_idCanton` INT NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idDistrito`),
  INDEX `fk_Distrito_Canton1_idx` (`Canton_idCanton` ASC),
  CONSTRAINT `fk_Distrito_Canton1`
    FOREIGN KEY (`Canton_idCanton`)
    REFERENCES `BanderaAzul`.`Canton` (`idCanton`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Persona`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Persona` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Persona` (
  `cedula` INT NOT NULL COMMENT 'Cédula de la persona',
  `nombrePersona` VARCHAR(45) NOT NULL COMMENT 'Nombre de la persona',
  `primerApellidoPersona` VARCHAR(45) NOT NULL COMMENT 'Primero apellido de la persona',
  `segundoApellidoPersona` VARCHAR(45) NOT NULL COMMENT 'Segundo apellido de la persona',
  `fechaNacimiento` DATETIME NOT NULL COMMENT 'Fecha de nacimiento de la persona',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `Distrito_idDistrito` INT NOT NULL COMMENT 'Llave foránea',
  `Pais_idPais` INT NOT NULL COMMENT 'Llave foránea',
  PRIMARY KEY (`cedula`),
  INDEX `fk_Persona_Distrito1_idx` (`Distrito_idDistrito` ASC),
  INDEX `fk_Persona_Pais1_idx` (`Pais_idPais` ASC),
  CONSTRAINT `fk_Persona_Distrito1`
    FOREIGN KEY (`Distrito_idDistrito`)
    REFERENCES `BanderaAzul`.`Distrito` (`idDistrito`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Persona_Pais1`
    FOREIGN KEY (`Pais_idPais`)
    REFERENCES `BanderaAzul`.`Pais` (`idPais`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`CorreoXPersona`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`CorreoXPersona` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`CorreoXPersona` (
  `idCorreo` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador del correo',
  `correo` VARCHAR(45) NOT NULL COMMENT 'Correo',
  `Persona_cedula` INT NOT NULL COMMENT 'Llave foránea\n',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idCorreo`),
  INDEX `fk_correosXpersona_Persona1_idx` (`Persona_cedula` ASC),
  CONSTRAINT `fk_correosXpersona_Persona1`
    FOREIGN KEY (`Persona_cedula`)
    REFERENCES `BanderaAzul`.`Persona` (`cedula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`TipoUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`TipoUsuario` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`TipoUsuario` (
  `idtipoUsuario` INT NOT NULL AUTO_INCREMENT COMMENT 'Identifiacador del tipo de usuario',
  `descripcion` VARCHAR(45) NOT NULL COMMENT 'Descripción del tipo de usuario',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idtipoUsuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Usuario` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Usuario` (
  `nombreUsuario` VARCHAR(45) NOT NULL COMMENT 'Nombre de usuario',
  `contrasena` VARCHAR(512) NOT NULL COMMENT 'Contraseña',
  `puntosActuales` INT NOT NULL DEFAULT 0 COMMENT 'Puntos actuales',
  `puntosGastados` INT NOT NULL DEFAULT 0 COMMENT 'Puntos Gastados',
  `puntosTotales` INT NOT NULL DEFAULT 0 COMMENT 'Puntos totales',
  `tipoUsuario_idtipoUsuario` INT NOT NULL COMMENT 'Llave foránea',
  `Persona_cedula` INT NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría\n',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría\n',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría\n',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría\n',
  PRIMARY KEY (`nombreUsuario`),
  UNIQUE INDEX `nombreUsuario_UNIQUE` (`nombreUsuario` ASC),
  INDEX `fk_Usuario_tipoUsuario1_idx` (`tipoUsuario_idtipoUsuario` ASC),
  INDEX `fk_Usuario_Persona1_idx` (`Persona_cedula` ASC),
  CONSTRAINT `fk_Usuario_tipoUsuario1`
    FOREIGN KEY (`tipoUsuario_idtipoUsuario`)
    REFERENCES `BanderaAzul`.`TipoUsuario` (`idtipoUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Usuario_Persona1`
    FOREIGN KEY (`Persona_cedula`)
    REFERENCES `BanderaAzul`.`Persona` (`cedula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`TipoComercio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`TipoComercio` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`TipoComercio` (
  `idTipoComercio` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador del tipo de comercio',
  `nombre` VARCHAR(45) NOT NULL COMMENT 'Nombre del comercio',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idTipoComercio`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Comercio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Comercio` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Comercio` (
  `idComercio` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador del comercio',
  `nombreComercio` VARCHAR(45) NOT NULL COMMENT 'Nombre del comercio',
  `contacto` INT NOT NULL COMMENT 'Contacto del comercio',
  `descripcion` VARCHAR(45) NOT NULL COMMENT 'Descripción del comercio',
  `Usuario_nombreUsuario` VARCHAR(45) NOT NULL COMMENT 'Llave foránea',
  `TipoComercio_idTipoComercio` INT NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idComercio`),
  INDEX `fk_Comercio_Usuario1_idx` (`Usuario_nombreUsuario` ASC),
  INDEX `fk_Comercio_TipoComercio1_idx` (`TipoComercio_idTipoComercio` ASC),
  CONSTRAINT `fk_Comercio_Usuario1`
    FOREIGN KEY (`Usuario_nombreUsuario`)
    REFERENCES `BanderaAzul`.`Usuario` (`nombreUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Comercio_TipoComercio1`
    FOREIGN KEY (`TipoComercio_idTipoComercio`)
    REFERENCES `BanderaAzul`.`TipoComercio` (`idTipoComercio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Producto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Producto` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Producto` (
  `idProducto` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador del producto',
  `foto` VARCHAR(100) NULL COMMENT 'Foto del producto',
  `precio` DECIMAL NOT NULL COMMENT 'Precio del producto',
  `nombre` VARCHAR(45) NOT NULL COMMENT 'Nombre del producto',
  `Comercio_idComercio` INT NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idProducto`),
  INDEX `fk_Producto_Comercio1_idx` (`Comercio_idComercio` ASC),
  CONSTRAINT `fk_Producto_Comercio1`
    FOREIGN KEY (`Comercio_idComercio`)
    REFERENCES `BanderaAzul`.`Comercio` (`idComercio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Localizacion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Localizacion` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Localizacion` (
  `codigo` INT NOT NULL AUTO_INCREMENT COMMENT 'Código de la localización',
  `coordenadaX` FLOAT NOT NULL COMMENT 'Coordenada X de la localización',
  `coordenadaY` FLOAT NOT NULL COMMENT 'Coordenada Y de la localización',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`codigo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`CentroAcopio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`CentroAcopio` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`CentroAcopio` (
  `idcentroAcopio` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador del centro de acopio',
  `nombreCentroAcopio` VARCHAR(45) NOT NULL COMMENT 'Nombre del centro de acopio',
  `contacto` INT NOT NULL COMMENT 'Contacto del centro de acopio',
  `Localizacion_codigo` INT NOT NULL COMMENT 'Llave foránea',
  `Distrito_idDistrito` INT NOT NULL COMMENT 'Llave foránea',
  `Usuario_nombreUsuario` VARCHAR(45) NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idcentroAcopio`, `Localizacion_codigo`),
  INDEX `fk_centroAcopio_Localizacion1_idx` (`Localizacion_codigo` ASC),
  INDEX `fk_centroAcopio_Distrito1_idx` (`Distrito_idDistrito` ASC),
  INDEX `fk_CentroAcopio_Usuario1_idx` (`Usuario_nombreUsuario` ASC),
  CONSTRAINT `fk_centroAcopio_Localizacion1`
    FOREIGN KEY (`Localizacion_codigo`)
    REFERENCES `BanderaAzul`.`Localizacion` (`codigo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_centroAcopio_Distrito1`
    FOREIGN KEY (`Distrito_idDistrito`)
    REFERENCES `BanderaAzul`.`Distrito` (`idDistrito`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CentroAcopio_Usuario1`
    FOREIGN KEY (`Usuario_nombreUsuario`)
    REFERENCES `BanderaAzul`.`Usuario` (`nombreUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`TelefonoXPersona`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`TelefonoXPersona` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`TelefonoXPersona` (
  `idTelefono` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador del teléfono',
  `telefono` INT NOT NULL COMMENT 'Teléfono',
  `Persona_cedula` INT NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idTelefono`),
  INDEX `fk_telefonosXpesona_Persona1_idx` (`Persona_cedula` ASC),
  CONSTRAINT `fk_telefonosXpesona_Persona1`
    FOREIGN KEY (`Persona_cedula`)
    REFERENCES `BanderaAzul`.`Persona` (`cedula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`EquivalenciaMaterial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`EquivalenciaMaterial` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`EquivalenciaMaterial` (
  `idPuntos` INT NOT NULL AUTO_INCREMENT,
  `descripcion` VARCHAR(45) NOT NULL COMMENT 'Nombre de la equivalencia del material ',
  `peso` INT NOT NULL COMMENT 'Peso de la equivalencia del material\n',
  `puntos` INT NOT NULL COMMENT 'Puntos de la equivalencia del material ',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idPuntos`, `descripcion`, `peso`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`ProductoXUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`ProductoXUsuario` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`ProductoXUsuario` (
  `idCodigo` INT NOT NULL AUTO_INCREMENT,
  `Producto_idProducto` INT NOT NULL COMMENT 'Llave foránea',
  `Usuario_nombreUsuario` VARCHAR(45) NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idCodigo`),
  INDEX `fk_Producto_has_Usuario_Usuario1_idx` (`Usuario_nombreUsuario` ASC),
  INDEX `fk_Producto_has_Usuario_Producto1_idx` (`Producto_idProducto` ASC),
  CONSTRAINT `fk_Producto_has_Usuario_Producto1`
    FOREIGN KEY (`Producto_idProducto`)
    REFERENCES `BanderaAzul`.`Producto` (`idProducto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Producto_has_Usuario_Usuario1`
    FOREIGN KEY (`Usuario_nombreUsuario`)
    REFERENCES `BanderaAzul`.`Usuario` (`nombreUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`Puntos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`Puntos` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`Puntos` (
  `idPuntos` INT NOT NULL AUTO_INCREMENT COMMENT 'Identificador de los puntos',
  `idTipoPuntos` INT NOT NULL COMMENT 'Identificador de los tipos de puntos',
  `peso` INT NOT NULL COMMENT 'Cantidad de puntos',
  `puntos` INT NOT NULL COMMENT 'Fecha y hora de la transacción de los puntos',
  `Usuario_nombreUsuario` VARCHAR(45) NOT NULL COMMENT 'Llave foránea',
  `centroAcopio_idcentroAcopio` INT NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idPuntos`),
  INDEX `fk_Puntos_Usuario1_idx` (`Usuario_nombreUsuario` ASC),
  INDEX `fk_Puntos_centroAcopio1_idx` (`centroAcopio_idcentroAcopio` ASC),
  CONSTRAINT `fk_Puntos_Usuario1`
    FOREIGN KEY (`Usuario_nombreUsuario`)
    REFERENCES `BanderaAzul`.`Usuario` (`nombreUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Puntos_centroAcopio1`
    FOREIGN KEY (`centroAcopio_idcentroAcopio`)
    REFERENCES `BanderaAzul`.`CentroAcopio` (`idcentroAcopio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`cambioClave`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`cambioClave` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`cambioClave` (
  `idcambioClave` INT NOT NULL COMMENT 'Identificador del cambio de clave',
  `claveNueva` VARCHAR(512) NOT NULL COMMENT 'Clave nueva',
  `claveVieja` VARCHAR(512) NOT NULL COMMENT 'Clave vieja',
  `Usuario_nombreUsuario` VARCHAR(45) NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idcambioClave`),
  INDEX `fk_cambioClave_Usuario1_idx` (`Usuario_nombreUsuario` ASC),
  CONSTRAINT `fk_cambioClave_Usuario1`
    FOREIGN KEY (`Usuario_nombreUsuario`)
    REFERENCES `BanderaAzul`.`Usuario` (`nombreUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BanderaAzul`.`topUsuarioXDia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BanderaAzul`.`topUsuarioXDia` ;

CREATE TABLE IF NOT EXISTS `BanderaAzul`.`topUsuarioXDia` (
  `idtop` INT NOT NULL COMMENT 'Identificador de la tabla top de usuarios',
  `Usuario_nombreUsuario` VARCHAR(45) NOT NULL COMMENT 'Llave foránea',
  `CentroAcopio_idcentroAcopio` INT NOT NULL COMMENT 'Llave foránea',
  `fecCreacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioCreacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  `fecUltimaModificacion` DATETIME NULL COMMENT 'Campo de auditoría',
  `usuarioUltimaModificacion` VARCHAR(45) NULL COMMENT 'Campo de auditoría',
  PRIMARY KEY (`idtop`),
  INDEX `fk_topUsuarioXDia_Usuario1_idx` (`Usuario_nombreUsuario` ASC),
  INDEX `fk_topUsuarioXDia_CentroAcopio1_idx` (`CentroAcopio_idcentroAcopio` ASC),
  CONSTRAINT `fk_topUsuarioXDia_Usuario1`
    FOREIGN KEY (`Usuario_nombreUsuario`)
    REFERENCES `BanderaAzul`.`Usuario` (`nombreUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_topUsuarioXDia_CentroAcopio1`
    FOREIGN KEY (`CentroAcopio_idcentroAcopio`)
    REFERENCES `BanderaAzul`.`CentroAcopio` (`idcentroAcopio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `BanderaAzul` ;

-- -----------------------------------------------------
-- function checkPassword
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP function IF EXISTS `BanderaAzul`.`checkPassword`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE FUNCTION `checkPassword` (`pUser` VARCHAR(45), `pPass` VARCHAR(45)) 
	RETURNS BOOLEAN
    NOT DETERMINISTIC
    READS SQL DATA
    SQL SECURITY DEFINER
BEGIN
	RETURN EXISTS(SELECT tipoUsuario_idtipoUsuario 
				  FROM `Usuario` 
				  WHERE nombreUsuario = pUser 
                  AND contrasena = pPass);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerLocalizacion
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerLocalizacion`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerLocalizacion` ()
	NOT DETERMINISTIC
    READS SQL DATA
    SQL SECURITY DEFINER
BEGIN
	SELECT coordenadaX, coordenadaY
    FROM `localizacion`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function tipoUsuario
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP function IF EXISTS `BanderaAzul`.`tipoUsuario`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE FUNCTION `tipoUsuario` (`pUser` VARCHAR(45))
	RETURNS INT(1)
    NOT DETERMINISTIC
    READS SQL DATA
    SQL SECURITY DEFINER
BEGIN
	RETURN (SELECT tipoUsuario_idtipoUsuario 
           FROM `Usuario` 
           WHERE nombreUsuario = pUser);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerPaises
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerPaises`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerPaises` ()
	NOT DETERMINISTIC
    READS SQL DATA
    SQL SECURITY DEFINER
BEGIN
	 SELECT idPais, nombrePais 
     FROM `Pais`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerProvincia
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerProvincia`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerProvincia` (IN `pCodigo` INT)
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER
BEGIN
	 SELECT idProvincia, nombreProvincia 
     FROM `Provincia`
     WHERE Pais_idPais = pCodigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCanton
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerCanton`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerCanton` (IN `pCodigo` INT)
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER
BEGIN
	SELECT idCanton, nombreCanton 
    FROM `Canton` 
    WHERE Provincia_idProvincia = pCodigo; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerDistrito
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerDistrito`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerDistrito` (IN `pCodigo` INT)
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER
BEGIN
	 SELECT idDistrito, nombreDistrito 
     FROM `Distrito`
     WHERE Canton_idCanton = pCodigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarUsuario
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarUsuario`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarUsuario`(IN `pCedula` INT, IN `pNombre` VARCHAR(45), IN `pApellido1` VARCHAR(45), IN `pApellido2` VARCHAR(45), IN `pNacimiento` DATETIME, IN `pDistrito` INT, IN `pPais` INT, IN `pUser` VARCHAR(45), IN `pPass` VARCHAR(512), IN `pTipo` INT)
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER
BEGIN
	INSERT INTO `persona`(`cedula`, `nombrePersona`, `primerApellidoPersona`, `segundoApellidoPersona`, `fechaNacimiento`, `Distrito_idDistrito`, `Pais_idPais`) VALUES (pCedula, pNombre, pApellido1, pApellido2, pNacimiento, pDistrito, pPais); 
	INSERT INTO `usuario`(`nombreUsuario`, `contrasena`, `puntosActuales`, `puntosGastados`, `puntosTotales`, `tipoUsuario_idtipoUsuario`, `Persona_cedula`) VALUES (pUser,pPass,0,0,0,pTipo,pCedula);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarCorreo
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarCorreo`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarCorreo` (IN `pCorreo` VARCHAR(45), IN `pCedula` INT)
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	INSERT INTO `correoxpersona`(`correo`, `Persona_cedula`) VALUES (pCorreo,pCedula);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarTelefono
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarTelefono`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarTelefono`(IN `pTelefono` INT, IN `pCedula` INT) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	INSERT INTO `telefonoxpersona`(`telefono`, `Persona_cedula`) VALUES (pTelefono,pCedula);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCentroAcopio
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerCentroAcopio`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerCentroAcopio` (IN pId INT)
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	SELECT `centroacopio`.`nombreCentroAcopio`, `centroacopio`.`contacto`, `localizacion`.`coordenadaX`, `localizacion`.`coordenadaY`, `distrito`.`nombreDistrito`, `canton`.`nombreCanton`, `provincia`.`nombreProvincia` 
    FROM `centroacopio`, `localizacion`, `distrito`, `canton`, `provincia` 
    WHERE `centroacopio`.idCentroAcopio = pId AND
		  `localizacion`.`codigo` = `centroacopio`.`Localizacion_codigo` AND 
		  `distrito`.`idDistrito` = `centroacopio`.`Distrito_idDistrito` AND 
          `canton`.`idCanton` = `distrito`.`Canton_idCanton` AND 
          `provincia`.`idProvincia` = `canton`.`Provincia_idProvincia`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerProducto
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerProducto`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerProducto` (IN `pUser` VARCHAR(45)) 
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	SELECT idProducto, foto, nombre, precio 
    FROM `Producto` 
    WHERE Comercio_idComercio = (SELECT idComercio 
								 FROM `Comercio` 
                                 WHERE Usuario_nombreUsuario = pUser); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarProducto
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarProducto`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarProducto` (IN `pFoto` VARCHAR(100), IN `pPrecio` INT, IN `pNombre` VARCHAR(45), IN `pCodigo` INT)
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	INSERT INTO `Producto`(`foto`, `precio`, `nombre`, `Comercio_idComercio`) 
    VALUES (pFoto, pPrecio, pNombre, pCodigo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarCentroAcopio
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarCentroAcopio`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarCentroAcopio` (IN `pNombre` VARCHAR(45), IN `pContacto` INT, IN `pCoordX` FLOAT, IN `pCoordY` FLOAT, IN `pDistrito` INT, IN `pUser` VARCHAR(45)) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	INSERT INTO `localizacion`(`coordenadaX`, `coordenadaY`) VALUES (pCoordX,pCoordY); 
	INSERT INTO `centroacopio`(`nombreCentroAcopio`, `contacto`, `Localizacion_codigo`, `Distrito_idDistrito`, `Usuario_nombreUsuario`) 
		VALUES (pNombre, pContacto, (SELECT LAST_INSERT_ID()), pDistrito, pUser);
	UPDATE Usuario SET tipoUsuario_idtipoUsuario = 2
	WHERE nombreUsuario = pUser;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarComercio
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarComercio`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarComercio`(IN `pNombre` VARCHAR(45), IN `pContacto` INT, IN `pDescripcion` VARCHAR(45), IN `pUser` VARCHAR(45), IN `pTipo` INT) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN
	INSERT INTO `Comercio` (`nombreComercio`, `contacto`, `descripcion`, `Usuario_nombreUsuario`, `TipoComercio_idTipoComercio`)
		VALUES (pNombre, pContacto, pDescripcion, pUser, pTipo); 
	UPDATE Usuario
		SET tipoUsuario_idtipoUsuario = 3
		WHERE nombreUsuario = pUser;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarEquivalenciaMaterial
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarEquivalenciaMaterial`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarEquivalenciaMaterial` (IN `pPeso` INT, IN `pPuntos` INT, IN `pNombre` VARCHAR(45)) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	INSERT INTO `equivalenciamaterial`(`peso`, `puntos`, `nombre`) VALUES (pPeso,pPuntos,pNombre); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editarEquivalenciaMaterial
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`editarEquivalenciaMaterial`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `editarEquivalenciaMaterial`(IN `pPeso` INT, IN `pNombre` VARCHAR(45), IN `pPuntos` INT) 
	NOT DETERMINISTIC 
    MODIFIES SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	UPDATE `equivalenciamaterial` 
		SET `puntos`= pPuntos 
        WHERE `equivalenciamaterial`.`peso`= pPeso 
        AND `equivalenciamaterial`.`nombre`= pNombre; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarCanje
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarCanje`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE  PROCEDURE insertarCanje(IN pProducto INT, IN pUser VARCHAR(45)) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	INSERT INTO productoxusuario(Producto_idProducto, Usuario_nombreUsuario) 
		VALUES (pProducto, pUser);UPDATE Usuario 
	SET 
		Usuario.puntosActuales = Usuario.puntosActuales - OBTENERPRECIOPRODUCTO(pProducto),
		Usuario.puntosGastados = Usuario.puntosGastados + OBTENERPRECIOPRODUCTO(pProducto)
	WHERE
		Usuario.nombreUsuario = pUser; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function puedeCanjear
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP function IF EXISTS `BanderaAzul`.`puedeCanjear`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE FUNCTION `puedeCanjear`(`totalPrecio` INT, `pUser` VARCHAR(45), `resp` BOOLEAN) 
	RETURNS BOOLEAN
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	SELECT IF(totalPrecio <= (SELECT puntosActuales 
							FROM `Usuario` 
                            WHERE nombreUsuario = pUser), 
			  TRUE, 
              FALSE) INTO resp; 
	RETURN resp; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerComercio
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerComercio`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerComercio` (IN `pUser` VARCHAR(45)) 
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	SELECT nombreComercio, contacto, descripcion, Usuario_nombreUsuario, TipoComercio.nombre 
    FROM `Comercio`, `TipoComercio` 
    WHERE Usuario_nombreUsuario = pUser AND TipoComercio_idTipoComercio = idTipoComercio; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function buscarIdComercio
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP function IF EXISTS `BanderaAzul`.`buscarIdComercio`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE FUNCTION `buscarIdComercio`(`pUser` VARCHAR(45)) RETURNS INT(11) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	RETURN (SELECT idComercio 
			FROM `Comercio` 
			WHERE pUser = Usuario_nombreUsuario); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editarProducto
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`editarProducto`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `editarProducto` (IN `pIdProducto` INT, IN `pFoto`VARCHAR(100), IN `pPrecio` DECIMAL, IN `pNombre` VARCHAR(45))
    NOT DETERMINISTIC
    MODIFIES SQL DATA
    SQL SECURITY DEFINER
BEGIN
    UPDATE `Producto`
        SET `Producto`.`foto` = pFoto,
            `Producto`.`precio` = pPrecio,
            `Producto`.`nombre` = pNombre
        WHERE `idProducto` = pIdProducto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function verContraseña
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP function IF EXISTS `BanderaAzul`.`verContraseña`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE FUNCTION `verContraseña`(`pUser` VARCHAR(45)) 
	RETURNS VARCHAR(512) 
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	RETURN (SELECT contrasena 
			FROM `usuario` 
			WHERE nombreUsuario = pUser); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usuariosNormales
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`usuariosNormales`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `usuariosNormales` ()
BEGIN
	select nombreUsuario
	from usuario
	where tipoUsuario_idtipoUsuario = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerTipoComercio
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerTipoComercio`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerTipoComercio` ()
BEGIN
	SELECT idTipoComercio, nombre
    FROM `TipoComercio`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usuariosXedad
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`usuariosXedad`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `usuariosXedad`() NOT DETERMINISTIC READS SQL DATA SQL SECURITY DEFINER 
BEGIN
    SELECT
		SUM(IF(age < 19,1,0)) as 'Menores 18',
		SUM(IF(age BETWEEN 19 and 30,1,0)) as '19 - 30',
		SUM(IF(age BETWEEN 31 and 45,1,0)) as '31 - 45',
		SUM(IF(age BETWEEN 46 and 55,1,0)) as '46 - 55',
		SUM(IF(age BETWEEN 56 and 65,1,0)) as '56 - 65',
		SUM(IF(age BETWEEN 66 and 75,1,0)) as '66 - 75',
		SUM(IF(age BETWEEN 76 and 85,1,0)) as '76 - 85',
		SUM(IF(age >=86, 1, 0)) as 'Mayores 85'
   FROM (SELECT TIMESTAMPDIFF(YEAR, persona.fechaNacimiento, CURDATE()) AS age FROM persona) as derived;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerEquivalenciaMaterial
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`obtenerEquivalenciaMaterial`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `obtenerEquivalenciaMaterial`() 
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	SELECT idTipo, descripcion, peso, puntos 
    FROM `EquivalenciaMaterial`; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarPuntos
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarPuntos`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarPuntos` (IN `pId` INT, IN `pPeso` INT, IN `pUser` INT) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER
BEGIN
	INSERT INTO `Puntos`(idTipoPuntos, peso, puntos)
    VALUES (pId, peso, puntos*(SELECT em.puntos
                               FROM `EquivalenciaMaterial` em
                               WHERE em.idPuntos = pId));
	UPDATE `Usuario`
        SET `Usuario`.`puntosActuales`  = `Usuario`.`puntosActuales` + puntos*(SELECT em.puntos
																			   FROM `EquivalenciaMaterial` em
																			   WHERE em.idPuntos = pId),
			`Usuario`.`puntosTotales`  = `Usuario`.`puntosTotales` + puntos*(SELECT em.puntos
																			 FROM `EquivalenciaMaterial` em
																			 WHERE em.idPuntos = pId)
		WHERE `Usuario`.`nombreUsuario` = pUser;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertarPuntos
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`insertarPuntos`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `insertarPuntos` (IN `pId` INT, IN `pPeso` INT, IN `pUser` INT) 
	NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER
BEGIN
	INSERT INTO `Puntos`(idTipoPuntos, peso, puntos)
    VALUES (pId, peso, puntos*(SELECT em.puntos
                               FROM `EquivalenciaMaterial` em
                               WHERE em.idPuntos = pId));
	UPDATE `Usuario`
        SET `Usuario`.`puntosActuales`  = `Usuario`.`puntosActuales` + puntos*(SELECT em.puntos
																			   FROM `EquivalenciaMaterial` em
																			   WHERE em.idPuntos = pId),
			`Usuario`.`puntosTotales`  = `Usuario`.`puntosTotales` + puntos*(SELECT em.puntos
																			 FROM `EquivalenciaMaterial` em
																			 WHERE em.idPuntos = pId)
		WHERE `Usuario`.`nombreUsuario` = pUser;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function buscarIdCentro
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP function IF EXISTS `BanderaAzul`.`buscarIdCentro`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE FUNCTION `buscarIdCentro`(`pUser` VARCHAR(45)) 
	RETURNS INT(11) 
    NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	RETURN (SELECT c.idcentroAcoipo
			FROM `CentroAcopio` c 
			WHERE pUser = c.Usuario_nombreUsuario); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function obtenerPrecioProducto
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP function IF EXISTS `BanderaAzul`.`obtenerPrecioProducto`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE FUNCTION obtenerPrecioProducto(pId INT) 
	RETURNS INT(12) 
    NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	RETURN (SELECT precio 
			FROM producto 
            WHERE producto.idProducto = pId); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function buscarIdCentro
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP function IF EXISTS `BanderaAzul`.`buscarIdCentro`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE FUNCTION `buscarIdCentro`(`pUser` VARCHAR(45)) 
	RETURNS INT(11) 
    NOT DETERMINISTIC 
    CONTAINS SQL 
    SQL SECURITY DEFINER 
BEGIN 
	RETURN (SELECT c.idcentroAcoipo
			FROM `CentroAcopio` c 
			WHERE pUser = c.Usuario_nombreUsuario); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure top5Productos
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`top5Productos`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `top5Productos`(IN `pComercio` INT) 
	NOT DETERMINISTIC
    CONTAINS SQL 
    SQL SECURITY DEFINER
BEGIN
	SELECT p.nombre, COUNT(pxu.Producto_idProducto) 
    FROM producto p, productoxusuario pxu 
    WHERE p.Comercio_idComercio = pComercio 
		AND p.idProducto = pxu. Producto_idProducto 
    GROUP BY p.nombre, p.idProducto
    ORDER BY COUNT(pxu.Producto_idProducto) DESC
    LIMIT 5;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure totalPuntosComercio
-- -----------------------------------------------------

USE `BanderaAzul`;
DROP procedure IF EXISTS `BanderaAzul`.`totalPuntosComercio`;

DELIMITER $$
USE `BanderaAzul`$$
CREATE PROCEDURE `totalPuntosComercio`(IN `pComercio` INT) 
	NOT DETERMINISTIC 
    READS SQL DATA 
    SQL SECURITY DEFINER 
BEGIN 
	SELECT COUNT(pxu.idCodigo)*p.precio AS puntos 
    FROM producto p, productoxusuario pxu 
    WHERE p.idProducto = pxu.Producto_idProducto 
		AND p.Comercio_idComercio = pComercio 
	GROUP BY p.Comercio_idComercio; 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `BanderaAzul`.`usuarios`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `BanderaAzul`.`usuarios` ;
USE `BanderaAzul`;
CREATE OR REPLACE VIEW `usuarios` (Nombre, Username, Cedula, Distrito, Canton, Provincia) AS 
SELECT
    CONCAT(`persona`.`nombrePersona`, ' ', `persona`.`primerApellidoPersona`, ' ', `persona`.`segundoApellidoPersona`),
    `usuario`.`nombreUsuario`,
    `persona`.`cedula`,
    `distrito`.`nombreDistrito`,
    `canton`.`nombreCanton`,
    `provincia`.`nombreProvincia`
FROM
    `persona`,
    `usuario`,
    `distrito`,
    `canton`,
    `provincia`
WHERE
    `persona`.`cedula` = `usuario`.`Persona_cedula` AND `persona`.`Distrito_idDistrito` = `distrito`.`idDistrito` AND `distrito`.`Canton_idCanton` = `canton`.`idCanton` AND `canton`.`Provincia_idProvincia` = `provincia`.`idProvincia`;

-- -----------------------------------------------------
-- View `BanderaAzul`.`comercios`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `BanderaAzul`.`comercios` ;
USE `BanderaAzul`;
CREATE OR REPLACE VIEW `comercios`(Comercio, Tipo, Descripcion, Contacto, Encargado)
	AS SELECT `comercio`.`nombreComercio`, `tipocomercio`.`nombre`, `comercio`.`descripcion`, `comercio`.`contacto`, CONCAT(`persona`.`nombrePersona`, ' ', `persona`.`primerApellidoPersona`, ' ', `persona`.`segundoApellidoPersona`)
		FROM `comercio`, `tipocomercio`, `persona`, `usuario` 
		WHERE (tipocomercio.idTipoComercio = comercio.TipoComercio_idTipoComercio) 
		AND (comercio.Usuario_nombreUsuario = usuario.nombreUsuario) 
		AND (persona.cedula = usuario.Persona_cedula);

-- -----------------------------------------------------
-- View `BanderaAzul`.`comerciosXTipo`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `BanderaAzul`.`comerciosXTipo` ;
USE `BanderaAzul`;
CREATE OR REPLACE VIEW `comerciosXTipo` (Tipo, Cantidad) AS 
	SELECT tc.nombre, COUNT(c.TipoComercio_idTipoComercio)
	FROM comercio c, tipocomercio tc
	WHERE tc.idTipoComercio = c.TipoComercio_idTipoComercio
	GROUP BY c.TipoComercio_idTipoComercio;

-- -----------------------------------------------------
-- View `BanderaAzul`.`centros`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `BanderaAzul`.`centros` ;
USE `BanderaAzul`;
CREATE OR REPLACE
 VIEW `centros`
 (Nombre, Contacto, Encagado, Provincia, Canton, Distrito, Latitud, Longitud)
 AS SELECT ca.nombreCentroAcopio, ca.contacto, 
	CONCAT(p.nombrePersona,' ', p.primerApellidoPersona,' ', p.segundoApellidoPersona),
    pr.nombreProvincia, c.nombreCanton, d.nombreDistrito, l.coordenadaX, l.coordenadaY
FROM centroacopio ca, usuario u, persona p, localizacion l, distrito d, canton c, provincia pr
WHERE ca.Usuario_nombreUsuario = u.nombreUsuario
AND u.Persona_cedula = p.cedula
AND ca.Localizacion_codigo = l.codigo
AND ca.Distrito_idDistrito = d.idDistrito 
AND d.Canton_idCanton = c.idCanton 
AND c.Provincia_idProvincia = pr.idProvincia;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `BanderaAzul`;

DELIMITER $$

USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Pais_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER() TRIGGER `BanderaAzul`.`Pais_BEFORE_INSERT` BEFORE INSERT ON `Pais` 
	FOR EACH ROW 
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Pais_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER() TRIGGER `BanderaAzul`.`Pais_BEFORE_UPDATE` BEFORE UPDATE ON `Pais`
	FOR EACH ROW 
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Provincia_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Provincia_BEFORE_INSERT` BEFORE INSERT ON `Provincia` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Provincia_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Provincia_BEFORE_UPDATE` BEFORE UPDATE ON `Provincia` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Canton_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Canton_BEFORE_INSERT` BEFORE INSERT ON `Canton` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Canton_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Canton_BEFORE_UPDATE` BEFORE UPDATE ON `Canton` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Distrito_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Distrito_BEFORE_INSERT` BEFORE INSERT ON `Distrito` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Distrito_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Distrito_BEFORE_UPDATE` BEFORE UPDATE ON `Distrito` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Persona_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Persona_BEFORE_INSERT` BEFORE INSERT ON `Persona` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Persona_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Persona_BEFORE_UPDATE` BEFORE UPDATE ON `Persona` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`CorreoXPersona_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`CorreoXPersona_BEFORE_INSERT` BEFORE INSERT ON `CorreoXPersona` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`CorreoXPersona_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`CorreoXPersona_BEFORE_UPDATE` BEFORE UPDATE ON `CorreoXPersona` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TipoUsuario_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TipoUsuario_BEFORE_INSERT` BEFORE INSERT ON `TipoUsuario` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TipoUsuario_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TipoUsuario_BEFORE_UPDATE` BEFORE UPDATE ON `TipoUsuario` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Usuario_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Usuario_BEFORE_INSERT` BEFORE INSERT ON `Usuario` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Usuario_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Usuario_BEFORE_UPDATE` BEFORE UPDATE ON `Usuario` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TipoComercio_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TipoComercio_BEFORE_INSERT` BEFORE INSERT ON `TipoComercio` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TipoComercio_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TipoComercio_BEFORE_UPDATE` BEFORE UPDATE ON `TipoComercio` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Comercio_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Comercio_BEFORE_INSERT` BEFORE INSERT ON `Comercio` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Comercio_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Comercio_BEFORE_UPDATE` BEFORE UPDATE ON `Comercio` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Producto_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Producto_BEFORE_INSERT` BEFORE INSERT ON `Producto` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Producto_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Producto_BEFORE_UPDATE` BEFORE UPDATE ON `Producto` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Localizacion_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Localizacion_BEFORE_INSERT` BEFORE INSERT ON `Localizacion` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Localizacion_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Localizacion_BEFORE_UPDATE` BEFORE UPDATE ON `Localizacion` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`CentroAcopio_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`CentroAcopio_BEFORE_INSERT` BEFORE INSERT ON `CentroAcopio` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`CentroAcopio_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`CentroAcopio_BEFORE_UPDATE` BEFORE UPDATE ON `CentroAcopio` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TelefonoXPersona_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TelefonoXPersona_BEFORE_INSERT` BEFORE INSERT ON `TelefonoXPersona` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`TelefonoXPersona_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`TelefonoXPersona_BEFORE_UPDATE` BEFORE UPDATE ON `TelefonoXPersona` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`EquivalenciaMaterial_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`EquivalenciaMaterial_BEFORE_INSERT` BEFORE INSERT ON `EquivalenciaMaterial` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`EquivalenciaMaterial_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`EquivalenciaMaterial_BEFORE_UPDATE` BEFORE UPDATE ON `EquivalenciaMaterial` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`ProductoXUsuario_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`ProductoXUsuario_BEFORE_INSERT` BEFORE INSERT ON `ProductoXUsuario` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`ProductoXUsuario_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`ProductoXUsuario_BEFORE_UPDATE` BEFORE UPDATE ON `ProductoXUsuario` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Puntos_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Puntos_BEFORE_INSERT` BEFORE INSERT ON `Puntos` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`Puntos_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`Puntos_BEFORE_UPDATE` BEFORE UPDATE ON `Puntos` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`cambioClave_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`cambioClave_BEFORE_INSERT` BEFORE INSERT ON `cambioClave` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`cambioClave_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`cambioClave_BEFORE_UPDATE` BEFORE UPDATE ON `cambioClave` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`topUsuarioXDia_BEFORE_INSERT` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`topUsuarioXDia_BEFORE_INSERT` BEFORE INSERT ON `topUsuarioXDia` FOR EACH ROW
	SET NEW.fecCreacion = NOW(),
		NEW.usuarioCreacion = CURRENT_USER();$$


USE `BanderaAzul`$$
DROP TRIGGER IF EXISTS `BanderaAzul`.`topUsuarioXDia_BEFORE_UPDATE` $$
USE `BanderaAzul`$$
CREATE DEFINER = CURRENT_USER TRIGGER `BanderaAzul`.`topUsuarioXDia_BEFORE_UPDATE` BEFORE UPDATE ON `topUsuarioXDia` FOR EACH ROW
	SET NEW.fecUltimaModificacion = NOW(),
		NEW.usuarioUltimaModificacion = CURRENT_USER();$$


DELIMITER ;
